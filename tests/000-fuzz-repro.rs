use json_threat_protection as jtp;
use serde_json::Value;

#[allow(dead_code)]
fn print_str(data: &[u8]) {
    let str = String::from_utf8_lossy(data);
    eprintln!("{}", str);
}

#[allow(dead_code)]
fn validate_by_serde_json(data: &[u8]) {
    let _v = serde_json::from_slice::<Value>(data).unwrap();
}

#[test]
fn fuzz() {
    let data = [
        91, 10, 32, 32, 32, 32, 34, 74, 83, 79, 78, 32, 84, 101, 115, 116, 32, 80, 97, 116, 116,
        101, 114, 110, 32, 112, 97, 115, 115, 49, 34, 44, 10, 32, 32, 32, 32, 123, 34, 111, 98,
        106, 101, 99, 116, 32, 119, 105, 116, 104, 32, 49, 32, 109, 101, 109, 98, 101, 114, 34, 58,
        91, 34, 97, 114, 114, 97, 121, 32, 119, 105, 116, 104, 32, 49, 32, 101, 108, 101, 109, 101,
        110, 116, 34, 93, 125, 44, 10, 32, 32, 32, 32, 123, 125, 44, 10, 32, 32, 32, 32, 91, 93,
        44, 10, 32, 32, 32, 32, 45, 52, 50, 44, 10, 32, 32, 32, 32, 116, 114, 117, 101, 44, 10, 32,
        32, 32, 32, 102, 97, 108, 115, 101, 44, 10, 32, 32, 32, 32, 110, 117, 108, 108, 44, 10, 32,
        32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 34, 105, 110, 116, 101, 103, 101, 114,
        34, 58, 32, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32,
        34, 114, 101, 97, 108, 34, 58, 32, 45, 57, 56, 55, 54, 46, 53, 52, 51, 50, 49, 48, 44, 10,
        32, 32, 32, 32, 32, 32, 32, 32, 34, 101, 34, 58, 32, 48, 46, 49, 50, 51, 52, 53, 54, 55,
        56, 57, 101, 45, 49, 50, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 34, 69, 34, 58, 32, 49,
        46, 50, 51, 52, 53, 54, 55, 56, 57, 48, 69, 43, 51, 52, 44, 10, 32, 32, 32, 32, 32, 32, 32,
        32, 34, 34, 58, 32, 32, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 69, 54, 54, 44, 10, 32,
        32, 32, 32, 32, 32, 32, 32, 34, 122, 101, 114, 103, 34, 58, 32, 48, 44, 10, 32, 32, 32, 32,
        32, 32, 32, 32, 34, 111, 110, 101, 34, 58, 32, 49, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32,
        34, 115, 112, 97, 99, 101, 34, 58, 32, 34, 32, 34, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32,
        34, 113, 117, 111, 116, 101, 34, 58, 32, 34, 92, 34, 34, 44, 10, 32, 32, 32, 32, 32, 32,
        32, 32, 34, 98, 97, 99, 107, 115, 108, 97, 115, 104, 34, 58, 32, 34, 92, 92, 34, 44, 10,
        32, 32, 32, 32, 32, 32, 32, 32, 34, 99, 111, 110, 116, 114, 111, 108, 115, 34, 58, 32, 34,
        92, 98, 92, 102, 92, 110, 92, 114, 92, 116, 34, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 34,
        115, 108, 97, 115, 104, 34, 58, 32, 34, 47, 32, 38, 32, 92, 47, 34, 44, 10, 32, 32, 32, 32,
        32, 32, 32, 32, 34, 97, 108, 112, 104, 97, 34, 58, 32, 34, 97, 98, 99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122,
        34, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 34, 65, 76, 80, 72, 65, 34, 58, 32, 34, 65, 66,
        67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90,
        34, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 34, 100, 103, 116, 105, 105, 34, 58, 32, 34,
        48, 49, 50, 51, 52, 53, 54, 55, 57, 48, 34, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 34, 48,
        49, 50, 51, 52, 53, 54, 55, 56, 57, 34, 58, 32, 34, 100, 105, 103, 105, 116, 34, 44, 10,
        32, 32, 32, 32, 32, 32, 32, 32, 34, 115, 112, 101, 99, 105, 97, 108, 34, 58, 32, 34, 96,
        49, 126, 33, 64, 35, 36, 37, 94, 38, 42, 40, 41, 95, 43, 45, 61, 123, 39, 58, 35, 120, 50,
        50, 59, 34, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 34, 92, 47, 92, 92, 92, 34, 92, 117,
        67, 65, 70, 69, 92, 117, 66, 65, 66, 69, 92, 117, 65, 66, 57, 56, 92, 117, 70, 67, 68, 69,
        92, 117, 98, 99, 100, 97, 92, 117, 101, 102, 52, 65, 92, 98, 92, 102, 92, 110, 92, 114, 92,
        116, 96, 49, 126, 33, 64, 35, 36, 37, 94, 38, 36, 40, 41, 95, 43, 45, 61, 91, 93, 123, 125,
        124, 59, 58, 39, 44, 46, 47, 60, 62, 63, 34, 10, 58, 32, 34, 65, 32, 107, 101, 121, 32, 99,
        97, 110, 32, 98, 101, 32, 97, 110, 121, 32, 115, 116, 114, 105, 110, 103, 34, 10, 32, 32,
        32, 32, 125, 44, 10, 32, 32, 32, 32, 48, 46, 53, 32, 44, 57, 56, 46, 54, 10, 44, 10, 57,
        57, 46, 52, 52, 10, 44, 10, 10, 49, 48, 54, 54, 44, 10, 49, 101, 49, 44, 10, 48, 46, 49,
        101, 49, 44, 10, 49, 101, 45, 49, 44, 10, 49, 101, 48, 48, 44, 50, 101, 43, 48, 48, 44, 50,
        101, 45, 48, 48, 10, 44, 34, 114, 111, 115, 101, 98, 117, 100, 34, 93,
    ];

    // let binding = String::from_utf8_lossy(&data);
    // let parts = binding.split_at(77);
    // eprintln!("part[0]: {:#}", parts.0);
    // eprintln!("part[1]: {:#}", parts.1);

    print_str(&data);
    validate_by_serde_json(&data);

    let validator = jtp::from_slice(&data);
    validator.validate().unwrap();

    // let data = br#"true"#;
    // let stream = ByteStream::new(data);
    // let validator = Validator::new(stream);
    // validator.validate().unwrap();

    // let data = br#"false"#;
    // let stream = ByteStream::new(data);
    // let validator = Validator::new(stream);
    // validator.validate().unwrap();

    // let data = br#"null"#;
    // let stream = ByteStream::new(data);
    // let validator = Validator::new(stream);
    // validator.validate().unwrap();

    // let data = br#""fdfd""#;
    // let stream = ByteStream::new(data);
    // let validator = Validator::new(stream).with_max_string_length(4);
    // validator.validate().unwrap();
}
